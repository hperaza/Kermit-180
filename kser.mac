; KSER.MAC
;       KERMIT - (Celtic for "FREE")
;
;       This is the RSX180/280 implementation of the Columbia University
;       KERMIT file transfer protocol. (C) 2021, Hector Peraza.
;
;       Version 4.0
;
; Derived from Kermit-80, originally written by Bill Catchings of the
; Columbia University Center for Computing Activities, 612 W. 115th St.,
; New York, NY 10025. with contributions by Frank da Cruz, Daphne Tzoar,
; Bernie Eiben, Bruce Tanner, Nick Bush, Greg Small, Kimmo Laaksonen,
; Jeff Damens, and many others. 
;
;       Copyright June 1981,1982,1983,1984,1985 Columbia University
;
;       This file contains the (system-independent) routines that implement
;       the SERVER part of the KERMIT protocol.
;
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Revision history (latest first):
;
; edit 3, 19-Mar-2021 by H. Peraza: preliminary Server Mode loop.
;
; edit 2, 27-Dec-2020 by H. Peraza: converted to Z80, targeting RSX180/280.
;
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Old Kermit-80 4.11 revision history:
;
; edit 1: September, 1987.  Created CPSSER.ASM from bits from the two CPSPK?
;	files.  
;	The code herein is to allow remote systems to communicate to 
;	this Kermit running in SERVER mode.  Note that not every server 
;	command will be supported, mind...

	.Z80

	ident	/03/

	include	KDEF.INC

	public	SRVVER,SERVER

	extrn	KERMIT,RPACK,SPACK,NAK,NAK0,ACKP,SEND1,READ1,SPAR
	extrn	SNDERR,CSRPOS,SCREND,FINMES

	extrn	SRVFLG,ARGBLK,DATA,NUMPKT,PKTNUM,NUMRTR,NUMTRY,CURCHK
	extrn	SFCB,QUIETD

	extrn	PFN

	cseg

SRVVER:	db	'KSER  (3) 20-Mar-2021',0	; name, edit number, date

; SERVER - Wait for and process Kermit packet(s).

SERVER:	ld	a,(QUIETD)
	or	a		; quiet display?
	ld	bc,0
	call	z,CSRPOS	; no, home cursor
	ld	hl,0
	ld	(NUMPKT),hl	; set the number of packets to zero
	ld	(NUMRTR),hl	; set the number of retries to zero
	xor	a
	ld	(PKTNUM),a	; set the packet number to zero
	ld	(NUMTRY),a	; set the number of tries to zero
	ld	a,'1'
	ld	(CURCHK),a	; start with single-character checksum
	call	RPACK		; wait for packet
	jp	NAK1		; trashed packet: NAK, retry
	cp	'I'		; Info packet?
	jr	nz,SERV1	; no
	ld	a,(ARGBLK+1)	; get the number of data bytes
	ld	hl,DATA		; pointer to the data
	call	SPAR		; read in the data (decode what they want)
	call	ACKP		; ACK the packet
	jp	SERVER		; and restart the server

NAK1:	call	NAK		; NAK the packet
	jp	SERVER		; and restart the server

; Process the packet

SERV1:	cp	'S'		; Send-Initiate packet?
	jr	nz,SERV2	; no
	jp	READ1		; else receive file

SERV2:	cp	'R'		; Receive-Initiate packet?
	jr	nz,SERV3	; no
	ld	hl,DATA		; get a pointer to the data
	ld	ix,SFCB		; place result in source FCB
	call	PFN		; parse filename
	jp	SEND1		; send file

SERV3:	cp	'K'		; Kermit command?
	jr	nz,SERV4	; no

	;...TODO

	jp	SERV7

SERV4:	cp	'C'		; Host command?
	jr	nz,SERV5	; no
	jp	SERV7		; and we'll not support them for security reasons

SERV5:	cp	'G'		; Generic command?
	jr	nz,SERV6	; no
	ld	a,(ARGBLK+1)	; get length
	ld	c,a		; keep a copy in register C
	or	a		; any command?
	jr	z,SERV7		; no, error
	ld	hl,DATA
	ld	a,(hl)		; get command char
	dec	c		; decrement length
	cp	'F'		; Finish?
	jp	nz,SERV51	; no

	;...TODO: restore orig. directory?

	call	ACKP		; ACK the command
	ld	a,(QUIETD)
	or	a		; quiet display?
	call	z,SCREND	; no, position cursor
	xor	a
	ld	(SRVFLG),a	; exit server mode
	jp	KERMIT		; back to command mode

SERV51:	cp	'C'		; Change directory?
	jp	nz,SERV52	; no

	;...TODO

SERV52:	cp	'D'		; Directory?
	jp	nz,SERV53	; no

	;...TODO

SERV53:	cp	'U'		; Disk Usage?
	jp	nz,SERV54	; no

	;...TODO

SERV54:	cp	'E'		; Erase file?
	jp	nz,SERV55	; no

	;...TODO

SERV55:	cp	'T'		; Type file?
	jp	nz,SERV56	; no

	;...TODO

SERV56:	cp	'R'		; Rename?
	jp	nz,SERV57	; no

	;...TODO

SERV57:	cp	'W'		; Who?
	jp	nz,SERV58	; no

	;...TODO

SERV58:	cp	'M'		; Short Message?
	jp	nz,SERV59	; no

	;...TODO

SERV59:	cp	'L'		; Logout/Bye?
	jp	nz,SERV7	; no, and that's about it

	;...TODO

SERV6:	cp	'N'		; NAK?
	jp	z,SERVER	; yes, ignore

SERV7:	ld	de,ERMS1
	push	de
	call	FINMES		; display error message
	pop	de
	call	SNDERR		; send Error packet
	jp	SERVER		; restart server

ERMS1:	defb	'?Invalid command',0

	end
